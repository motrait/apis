// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: motrait/product/v1/product.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProductServiceClient is the client API for ProductService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductServiceClient interface {
	ListProducts(ctx context.Context, in *ListProductsRequest, opts ...grpc.CallOption) (*ListProductsResponse, error)
	GetProduct(ctx context.Context, in *GetProductRequest, opts ...grpc.CallOption) (*Product, error)
	CreateProduct(ctx context.Context, in *CreateProductRequest, opts ...grpc.CallOption) (*Product, error)
	UpdateProduct(ctx context.Context, in *UpdateProductRequest, opts ...grpc.CallOption) (*Product, error)
	DeleteProduct(ctx context.Context, in *DeleteProductRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type productServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductServiceClient(cc grpc.ClientConnInterface) ProductServiceClient {
	return &productServiceClient{cc}
}

func (c *productServiceClient) ListProducts(ctx context.Context, in *ListProductsRequest, opts ...grpc.CallOption) (*ListProductsResponse, error) {
	out := new(ListProductsResponse)
	err := c.cc.Invoke(ctx, "/motrait.product.v1.ProductService/ListProducts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetProduct(ctx context.Context, in *GetProductRequest, opts ...grpc.CallOption) (*Product, error) {
	out := new(Product)
	err := c.cc.Invoke(ctx, "/motrait.product.v1.ProductService/GetProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) CreateProduct(ctx context.Context, in *CreateProductRequest, opts ...grpc.CallOption) (*Product, error) {
	out := new(Product)
	err := c.cc.Invoke(ctx, "/motrait.product.v1.ProductService/CreateProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) UpdateProduct(ctx context.Context, in *UpdateProductRequest, opts ...grpc.CallOption) (*Product, error) {
	out := new(Product)
	err := c.cc.Invoke(ctx, "/motrait.product.v1.ProductService/UpdateProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) DeleteProduct(ctx context.Context, in *DeleteProductRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/motrait.product.v1.ProductService/DeleteProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductServiceServer is the server API for ProductService service.
// All implementations must embed UnimplementedProductServiceServer
// for forward compatibility
type ProductServiceServer interface {
	ListProducts(context.Context, *ListProductsRequest) (*ListProductsResponse, error)
	GetProduct(context.Context, *GetProductRequest) (*Product, error)
	CreateProduct(context.Context, *CreateProductRequest) (*Product, error)
	UpdateProduct(context.Context, *UpdateProductRequest) (*Product, error)
	DeleteProduct(context.Context, *DeleteProductRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedProductServiceServer()
}

// UnimplementedProductServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProductServiceServer struct {
}

func (UnimplementedProductServiceServer) ListProducts(context.Context, *ListProductsRequest) (*ListProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProducts not implemented")
}
func (UnimplementedProductServiceServer) GetProduct(context.Context, *GetProductRequest) (*Product, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProduct not implemented")
}
func (UnimplementedProductServiceServer) CreateProduct(context.Context, *CreateProductRequest) (*Product, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProduct not implemented")
}
func (UnimplementedProductServiceServer) UpdateProduct(context.Context, *UpdateProductRequest) (*Product, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProduct not implemented")
}
func (UnimplementedProductServiceServer) DeleteProduct(context.Context, *DeleteProductRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProduct not implemented")
}
func (UnimplementedProductServiceServer) mustEmbedUnimplementedProductServiceServer() {}

// UnsafeProductServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductServiceServer will
// result in compilation errors.
type UnsafeProductServiceServer interface {
	mustEmbedUnimplementedProductServiceServer()
}

func RegisterProductServiceServer(s grpc.ServiceRegistrar, srv ProductServiceServer) {
	s.RegisterService(&ProductService_ServiceDesc, srv)
}

func _ProductService_ListProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).ListProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/motrait.product.v1.ProductService/ListProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).ListProducts(ctx, req.(*ListProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/motrait.product.v1.ProductService/GetProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetProduct(ctx, req.(*GetProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_CreateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).CreateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/motrait.product.v1.ProductService/CreateProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).CreateProduct(ctx, req.(*CreateProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_UpdateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).UpdateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/motrait.product.v1.ProductService/UpdateProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).UpdateProduct(ctx, req.(*UpdateProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_DeleteProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).DeleteProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/motrait.product.v1.ProductService/DeleteProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).DeleteProduct(ctx, req.(*DeleteProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductService_ServiceDesc is the grpc.ServiceDesc for ProductService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "motrait.product.v1.ProductService",
	HandlerType: (*ProductServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListProducts",
			Handler:    _ProductService_ListProducts_Handler,
		},
		{
			MethodName: "GetProduct",
			Handler:    _ProductService_GetProduct_Handler,
		},
		{
			MethodName: "CreateProduct",
			Handler:    _ProductService_CreateProduct_Handler,
		},
		{
			MethodName: "UpdateProduct",
			Handler:    _ProductService_UpdateProduct_Handler,
		},
		{
			MethodName: "DeleteProduct",
			Handler:    _ProductService_DeleteProduct_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "motrait/product/v1/product.proto",
}

// SuiteServiceClient is the client API for SuiteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SuiteServiceClient interface {
	ListSuites(ctx context.Context, in *ListSuitesRequest, opts ...grpc.CallOption) (*ListSuitesResponse, error)
	GetSuite(ctx context.Context, in *GetSuiteRequest, opts ...grpc.CallOption) (*Suite, error)
	CreateSuite(ctx context.Context, in *CreateSuiteRequest, opts ...grpc.CallOption) (*Suite, error)
	UpdateSuite(ctx context.Context, in *UpdateSuiteRequest, opts ...grpc.CallOption) (*Suite, error)
	DeleteSuite(ctx context.Context, in *DeleteSuiteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type suiteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSuiteServiceClient(cc grpc.ClientConnInterface) SuiteServiceClient {
	return &suiteServiceClient{cc}
}

func (c *suiteServiceClient) ListSuites(ctx context.Context, in *ListSuitesRequest, opts ...grpc.CallOption) (*ListSuitesResponse, error) {
	out := new(ListSuitesResponse)
	err := c.cc.Invoke(ctx, "/motrait.product.v1.SuiteService/ListSuites", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suiteServiceClient) GetSuite(ctx context.Context, in *GetSuiteRequest, opts ...grpc.CallOption) (*Suite, error) {
	out := new(Suite)
	err := c.cc.Invoke(ctx, "/motrait.product.v1.SuiteService/GetSuite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suiteServiceClient) CreateSuite(ctx context.Context, in *CreateSuiteRequest, opts ...grpc.CallOption) (*Suite, error) {
	out := new(Suite)
	err := c.cc.Invoke(ctx, "/motrait.product.v1.SuiteService/CreateSuite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suiteServiceClient) UpdateSuite(ctx context.Context, in *UpdateSuiteRequest, opts ...grpc.CallOption) (*Suite, error) {
	out := new(Suite)
	err := c.cc.Invoke(ctx, "/motrait.product.v1.SuiteService/UpdateSuite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suiteServiceClient) DeleteSuite(ctx context.Context, in *DeleteSuiteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/motrait.product.v1.SuiteService/DeleteSuite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SuiteServiceServer is the server API for SuiteService service.
// All implementations must embed UnimplementedSuiteServiceServer
// for forward compatibility
type SuiteServiceServer interface {
	ListSuites(context.Context, *ListSuitesRequest) (*ListSuitesResponse, error)
	GetSuite(context.Context, *GetSuiteRequest) (*Suite, error)
	CreateSuite(context.Context, *CreateSuiteRequest) (*Suite, error)
	UpdateSuite(context.Context, *UpdateSuiteRequest) (*Suite, error)
	DeleteSuite(context.Context, *DeleteSuiteRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedSuiteServiceServer()
}

// UnimplementedSuiteServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSuiteServiceServer struct {
}

func (UnimplementedSuiteServiceServer) ListSuites(context.Context, *ListSuitesRequest) (*ListSuitesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSuites not implemented")
}
func (UnimplementedSuiteServiceServer) GetSuite(context.Context, *GetSuiteRequest) (*Suite, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSuite not implemented")
}
func (UnimplementedSuiteServiceServer) CreateSuite(context.Context, *CreateSuiteRequest) (*Suite, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSuite not implemented")
}
func (UnimplementedSuiteServiceServer) UpdateSuite(context.Context, *UpdateSuiteRequest) (*Suite, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSuite not implemented")
}
func (UnimplementedSuiteServiceServer) DeleteSuite(context.Context, *DeleteSuiteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSuite not implemented")
}
func (UnimplementedSuiteServiceServer) mustEmbedUnimplementedSuiteServiceServer() {}

// UnsafeSuiteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SuiteServiceServer will
// result in compilation errors.
type UnsafeSuiteServiceServer interface {
	mustEmbedUnimplementedSuiteServiceServer()
}

func RegisterSuiteServiceServer(s grpc.ServiceRegistrar, srv SuiteServiceServer) {
	s.RegisterService(&SuiteService_ServiceDesc, srv)
}

func _SuiteService_ListSuites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSuitesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuiteServiceServer).ListSuites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/motrait.product.v1.SuiteService/ListSuites",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuiteServiceServer).ListSuites(ctx, req.(*ListSuitesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuiteService_GetSuite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSuiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuiteServiceServer).GetSuite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/motrait.product.v1.SuiteService/GetSuite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuiteServiceServer).GetSuite(ctx, req.(*GetSuiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuiteService_CreateSuite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSuiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuiteServiceServer).CreateSuite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/motrait.product.v1.SuiteService/CreateSuite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuiteServiceServer).CreateSuite(ctx, req.(*CreateSuiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuiteService_UpdateSuite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSuiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuiteServiceServer).UpdateSuite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/motrait.product.v1.SuiteService/UpdateSuite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuiteServiceServer).UpdateSuite(ctx, req.(*UpdateSuiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuiteService_DeleteSuite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSuiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuiteServiceServer).DeleteSuite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/motrait.product.v1.SuiteService/DeleteSuite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuiteServiceServer).DeleteSuite(ctx, req.(*DeleteSuiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SuiteService_ServiceDesc is the grpc.ServiceDesc for SuiteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SuiteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "motrait.product.v1.SuiteService",
	HandlerType: (*SuiteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListSuites",
			Handler:    _SuiteService_ListSuites_Handler,
		},
		{
			MethodName: "GetSuite",
			Handler:    _SuiteService_GetSuite_Handler,
		},
		{
			MethodName: "CreateSuite",
			Handler:    _SuiteService_CreateSuite_Handler,
		},
		{
			MethodName: "UpdateSuite",
			Handler:    _SuiteService_UpdateSuite_Handler,
		},
		{
			MethodName: "DeleteSuite",
			Handler:    _SuiteService_DeleteSuite_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "motrait/product/v1/product.proto",
}
